
==========================================
==============SAMPLE QUERIES==============
==========================================

var results = from anItem in Reservations
where anItem.SpecialEvents.EventCode.Equals("S") &&
DateTime.Today.AddDays(-30) < anItem.ReservationDate
orderby anItem.NumberInParty descending
select new
{
	anItem.CustomerName,
	anItem.NumberInParty,
	anItem.SpecialEvents.Description,
	ResDate = string.Format("{0:dd MMM, yyyy}", anItem.ReservationDate)
};
results.Dump();
results.Count().Dump("Count of Instances");

var entity = from anItem in SpecialEvents
select anItem;
entity.Dump();

var bill = from billStuff in Bills
select billStuff;
bill.Dump();

var resultsOne = from anItemOne in Bills 
join anItemTwo in BillItems on anItemOne.BillID equals anItemTwo.BillID
select new
{
	anItemOne.BillID,
	anItemOne.PaidStatus,
	anItemOne.NumberInParty,
	anItemOne.WaiterID,
	anItemTwo.SalePrice,
	anItemTwo.UnitCost
};
resultsOne.Dump();



=========================================
===============USING POCOS===============
=========================================
void Main()
{
	var date = new DateTime(2014, 10, 24);
	date.Dump();
	
	ReservationsByTime(date).Dump();
}


//List ReservationsByTime
public List<dynamic> ReservationsByTime(DateTime date)					//Change Dynamic to DTO.ClassName
{
	var results = from data in Reservations 
				where data.ReservationDate.Year == date.Year
				  		&& data.ReservationDate.Month == date.Month
						&& data.ReservationDate.Day == date.Day
						&& data.ReservationStatus == 'B'
				select new												//DTO.ClassName
				{
					Name = data.CustomerName,
					Contact = data.ContactPhone,
					Date = data.ReservationDate,
					NumberInParty = data.NumberInParty,
					Status = data.ReservationStatus,
					EventType = data.SpecialEvents.Description
				};
				
	//Example of Grouping.
	var finalResults = from data in results
					orderby data.NumberInParty
					group data by data.Date.TimeOfDay into itemGroup
					select new
				{
					SeatingTime = itemGroup.Key,
					Reservations = itemGroup.ToList()
				};
	
				
	return finalResults.ToList<dynamic>();								//Remove 'Dynamic' when placed into actual program.
}


==================================================
===============Sub Query and Union ===============
==================================================

// Find out information on the tables in the restaurant at a specific date/time

// Create a date and time object to use for sample input data
var date = Bills.Max(b => b.BillDate).Date;
var time = Bills.Max(b => b.BillDate).TimeOfDay.Add(new TimeSpan(0, 30, 0));
date.Add(time).Dump("The test date/time I am using");


// Step 1 - Get the table info along with any walk-in bills and reservation bills for the specific time slot
var step1 = from data in Tables
             select new
             {
                Table = data.TableNumber,
                Seating = data.Capacity,
                // This sub-query gets the bills for walk-in customers
                WalkIns = from walkIn in data.Bills
                        where 
                               walkIn.BillDate.Year == date.Year
                            && walkIn.BillDate.Month == date.Month
                            && walkIn.BillDate.Day == date.Day
                            && walkIn.BillDate.TimeOfDay <= time
                            && (!walkIn.OrderPaid.HasValue || walkIn.OrderPaid.Value >= time)
//                          && (!walkIn.PaidStatus || walkIn.OrderPaid >= time)
                        select walkIn,
                 						// This sub-query gets the bills for reservations
										Reservations = from booking in data.ReservationTables
												from reservationParty in booking.Reservation.Bills
												where 
													reservationParty.BillDate.Year == date.Year
													&& reservationParty.BillDate.Month == date.Month
													&& reservationParty.BillDate.Day == date.Day
													&& reservationParty.BillDate.TimeOfDay <= time
													&& (!reservationParty.OrderPaid.HasValue || reservationParty.OrderPaid.Value >= time)
						//                          && (!reservationParty.PaidStatus || reservationParty.OrderPaid >= time)
												select booking
             };
//step1.Dump();


// Step 2 - Union the walk-in bills and the reservation bills while extracting the relevant bill info
// .ToList() helps resolve the "Types in Union or Concat are constructed incompatibly" error
var step2 = from data in step1.ToList() // .ToList() forces the first result set to be in memory
            select new
            {
                Table = data.Table,
                Seating = data.Seating,
                CommonBilling = from info in data.WalkIns.Union(data.Reservations)
                                select new // info
                                {
                                    BillID = info.BillID,
                                    BillTotal = info.BillItems.Sum(bi => bi.Quantity * bi.SalePrice),
                                    Waiter = info.Waiter.FirstName,
                                    Reservation = info.Reservation
                                }
            };
step2.Dump();